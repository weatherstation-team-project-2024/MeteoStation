// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using api.Data;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240907165647_V7")]
    partial class V7
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("api.Models.Node", b =>
                {
                    b.Property<int>("NodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NodeId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean");

                    b.Property<long?>("DeviceId")
                        .HasColumnType("bigint");

                    b.Property<string>("DeviceIdHex")
                        .HasColumnType("text");

                    b.Property<double?>("Elevation")
                        .HasColumnType("double precision");

                    b.Property<int?>("FirmwareVersion")
                        .HasColumnType("integer");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("NodeName")
                        .HasColumnType("text");

                    b.Property<long?>("RegisteredDate")
                        .HasColumnType("bigint");

                    b.Property<int>("StationId")
                        .HasColumnType("integer");

                    b.Property<string>("StationIdUuid")
                        .HasColumnType("text");

                    b.Property<string>("StationName")
                        .HasColumnType("text");

                    b.HasKey("NodeId");

                    b.HasIndex("StationId");

                    b.ToTable("Nodes");
                });

            modelBuilder.Entity("api.Models.Sensor", b =>
                {
                    b.Property<int>("Lsid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Lsid"));

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<long?>("CreatedDate")
                        .HasColumnType("bigint");

                    b.Property<double?>("Elevation")
                        .HasColumnType("double precision");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("text");

                    b.Property<long?>("ModifiedDate")
                        .HasColumnType("bigint");

                    b.Property<long?>("ParentDeviceId")
                        .HasColumnType("bigint");

                    b.Property<string>("ParentDeviceIdHex")
                        .HasColumnType("text");

                    b.Property<string>("ParentDeviceName")
                        .HasColumnType("text");

                    b.Property<string>("ParentDeviceType")
                        .HasColumnType("text");

                    b.Property<int?>("PortNumber")
                        .HasColumnType("integer");

                    b.Property<string>("ProductName")
                        .HasColumnType("text");

                    b.Property<string>("ProductNumber")
                        .HasColumnType("text");

                    b.Property<int?>("RainCollectorType")
                        .HasColumnType("integer");

                    b.Property<int?>("SensorType")
                        .HasColumnType("integer");

                    b.Property<int>("StationId")
                        .HasColumnType("integer");

                    b.Property<string>("StationIdUuid")
                        .HasColumnType("text");

                    b.Property<string>("StationName")
                        .HasColumnType("text");

                    b.Property<string>("TxId")
                        .HasColumnType("text");

                    b.HasKey("Lsid");

                    b.HasIndex("StationId");

                    b.ToTable("Sensors");
                });

            modelBuilder.Entity("api.Models.Station", b =>
                {
                    b.Property<int>("StationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "station_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StationId"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "active");

                    b.Property<string>("City")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "city");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "company_name");

                    b.Property<string>("Country")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "country");

                    b.Property<double>("Elevation")
                        .HasColumnType("double precision")
                        .HasAnnotation("Relational:JsonPropertyName", "elevation");

                    b.Property<string>("FirmwareVersion")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "firmware_version");

                    b.Property<int>("GatewayId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "gateway_id");

                    b.Property<string>("GatewayIdHex")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "gateway_id_hex");

                    b.Property<string>("GatewayType")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "gateway_type");

                    b.Property<long>("GeneratedAt")
                        .HasColumnType("bigint");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision")
                        .HasAnnotation("Relational:JsonPropertyName", "latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision")
                        .HasAnnotation("Relational:JsonPropertyName", "longitude");

                    b.Property<bool>("Private")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "private");

                    b.Property<string>("ProductNumber")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "product_number");

                    b.Property<int>("RecordingInterval")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "recording_interval");

                    b.Property<string>("Region")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "region");

                    b.Property<long>("RegisteredDate")
                        .HasColumnType("bigint")
                        .HasAnnotation("Relational:JsonPropertyName", "registered_date");

                    b.Property<string>("RelationshipType")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "relationship_type");

                    b.Property<Guid>("StationIdUuid")
                        .HasColumnType("uuid");

                    b.Property<string>("StationIdUuidString")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "station_id_uuid");

                    b.Property<string>("StationName")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "station_name");

                    b.Property<string>("SubscriptionType")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "subscription_type");

                    b.Property<string>("TimeZone")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "time_zone");

                    b.Property<string>("UserEmail")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "user_email");

                    b.Property<string>("Username")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "username");

                    b.HasKey("StationId");

                    b.HasIndex("GeneratedAt");

                    b.HasIndex("StationIdUuid")
                        .IsUnique();

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("api.Models.WeatherData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Aqi1HourDesc")
                        .HasColumnType("text");

                    b.Property<double?>("Aqi1HourVal")
                        .HasColumnType("double precision");

                    b.Property<string>("AqiDesc")
                        .HasColumnType("text");

                    b.Property<string>("AqiNowcastDesc")
                        .HasColumnType("text");

                    b.Property<double?>("AqiNowcastVal")
                        .HasColumnType("double precision");

                    b.Property<string>("AqiType")
                        .HasColumnType("text");

                    b.Property<double?>("AqiVal")
                        .HasColumnType("double precision");

                    b.Property<double?>("BarAbsolute")
                        .HasColumnType("double precision");

                    b.Property<double?>("BarOffset")
                        .HasColumnType("double precision");

                    b.Property<double?>("BarSeaLevel")
                        .HasColumnType("double precision");

                    b.Property<double?>("BarTrend")
                        .HasColumnType("double precision");

                    b.Property<int?>("BatteryVoltage")
                        .HasColumnType("integer");

                    b.Property<string>("Bgn")
                        .HasColumnType("text");

                    b.Property<string>("BluetoothVersion")
                        .HasColumnType("text");

                    b.Property<long?>("BootloaderVersion")
                        .HasColumnType("bigint");

                    b.Property<double?>("DewPointIn")
                        .HasColumnType("double precision");

                    b.Property<string>("DnsTypeUsed")
                        .HasColumnType("text");

                    b.Property<long?>("EspressifVersion")
                        .HasColumnType("bigint");

                    b.Property<long?>("FirmwareVersion")
                        .HasColumnType("bigint");

                    b.Property<int?>("HealthVersion")
                        .HasColumnType("integer");

                    b.Property<double?>("HeatIndex")
                        .HasColumnType("double precision");

                    b.Property<double?>("HeatIndexIn")
                        .HasColumnType("double precision");

                    b.Property<double?>("Hum")
                        .HasColumnType("double precision");

                    b.Property<double?>("HumIn")
                        .HasColumnType("double precision");

                    b.Property<int?>("InputVoltage")
                        .HasColumnType("integer");

                    b.Property<int?>("IpAddressType")
                        .HasColumnType("integer");

                    b.Property<string>("IpV4Address")
                        .HasColumnType("text");

                    b.Property<string>("IpV4Gateway")
                        .HasColumnType("text");

                    b.Property<string>("IpV4Netmask")
                        .HasColumnType("text");

                    b.Property<long?>("LastReportTime")
                        .HasColumnType("bigint");

                    b.Property<long?>("LinkUptime")
                        .HasColumnType("bigint");

                    b.Property<int?>("LocalApiQueries")
                        .HasColumnType("integer");

                    b.Property<string>("NetworkError")
                        .HasColumnType("text");

                    b.Property<int?>("NetworkType")
                        .HasColumnType("integer");

                    b.Property<int?>("PctPmData1Hour")
                        .HasColumnType("integer");

                    b.Property<int?>("PctPmData24Hour")
                        .HasColumnType("integer");

                    b.Property<int?>("PctPmData3Hour")
                        .HasColumnType("integer");

                    b.Property<int?>("PctPmDataNowcast")
                        .HasColumnType("integer");

                    b.Property<double?>("Pm1")
                        .HasColumnType("double precision");

                    b.Property<double?>("Pm10")
                        .HasColumnType("double precision");

                    b.Property<double?>("Pm10Nowcast")
                        .HasColumnType("double precision");

                    b.Property<double?>("Pm10_1Hour")
                        .HasColumnType("double precision");

                    b.Property<double?>("Pm10_24Hour")
                        .HasColumnType("double precision");

                    b.Property<double?>("Pm10_3Hour")
                        .HasColumnType("double precision");

                    b.Property<double?>("Pm2p5")
                        .HasColumnType("double precision");

                    b.Property<double?>("Pm2p5Nowcast")
                        .HasColumnType("double precision");

                    b.Property<double?>("Pm2p5_1Hour")
                        .HasColumnType("double precision");

                    b.Property<double?>("Pm2p5_24Hour")
                        .HasColumnType("double precision");

                    b.Property<double?>("Pm2p5_3Hour")
                        .HasColumnType("double precision");

                    b.Property<long?>("RadioVersion")
                        .HasColumnType("bigint");

                    b.Property<double?>("RainRateHiClicks")
                        .HasColumnType("double precision");

                    b.Property<double?>("RainRateHiIn")
                        .HasColumnType("double precision");

                    b.Property<double?>("RainRateHiLast15MinClicks")
                        .HasColumnType("double precision");

                    b.Property<double?>("RainRateHiLast15MinIn")
                        .HasColumnType("double precision");

                    b.Property<double?>("RainRateHiLast15MinMm")
                        .HasColumnType("double precision");

                    b.Property<double?>("RainRateHiMm")
                        .HasColumnType("double precision");

                    b.Property<double?>("RainRateLastClicks")
                        .HasColumnType("double precision");

                    b.Property<double?>("RainRateLastIn")
                        .HasColumnType("double precision");

                    b.Property<double?>("RainRateLastMm")
                        .HasColumnType("double precision");

                    b.Property<int?>("RainSize")
                        .HasColumnType("integer");

                    b.Property<int?>("RainStormClicks")
                        .HasColumnType("integer");

                    b.Property<double?>("RainStormIn")
                        .HasColumnType("double precision");

                    b.Property<int?>("RainStormLastClicks")
                        .HasColumnType("integer");

                    b.Property<long?>("RainStormLastEndAt")
                        .HasColumnType("bigint");

                    b.Property<double?>("RainStormLastIn")
                        .HasColumnType("double precision");

                    b.Property<double?>("RainStormLastMm")
                        .HasColumnType("double precision");

                    b.Property<long?>("RainStormLastStartAt")
                        .HasColumnType("bigint");

                    b.Property<double?>("RainStormMm")
                        .HasColumnType("double precision");

                    b.Property<string>("RainStormStartTime")
                        .HasColumnType("text");

                    b.Property<int?>("RainfallDailyClicks")
                        .HasColumnType("integer");

                    b.Property<double?>("RainfallDailyIn")
                        .HasColumnType("double precision");

                    b.Property<double?>("RainfallDailyMm")
                        .HasColumnType("double precision");

                    b.Property<double?>("RainfallLast15MinClicks")
                        .HasColumnType("double precision");

                    b.Property<double?>("RainfallLast15MinIn")
                        .HasColumnType("double precision");

                    b.Property<double?>("RainfallLast15MinMm")
                        .HasColumnType("double precision");

                    b.Property<double?>("RainfallLast24HrClicks")
                        .HasColumnType("double precision");

                    b.Property<double?>("RainfallLast24HrIn")
                        .HasColumnType("double precision");

                    b.Property<double?>("RainfallLast24HrMm")
                        .HasColumnType("double precision");

                    b.Property<double?>("RainfallLast60MinClicks")
                        .HasColumnType("double precision");

                    b.Property<double?>("RainfallLast60MinIn")
                        .HasColumnType("double precision");

                    b.Property<double?>("RainfallLast60MinMm")
                        .HasColumnType("double precision");

                    b.Property<int?>("RainfallMonthlyClicks")
                        .HasColumnType("integer");

                    b.Property<double?>("RainfallMonthlyIn")
                        .HasColumnType("double precision");

                    b.Property<double?>("RainfallMonthlyMm")
                        .HasColumnType("double precision");

                    b.Property<int?>("RainfallYearClicks")
                        .HasColumnType("integer");

                    b.Property<double?>("RainfallYearIn")
                        .HasColumnType("double precision");

                    b.Property<double?>("RainfallYearMm")
                        .HasColumnType("double precision");

                    b.Property<int?>("RapidRecordsSent")
                        .HasColumnType("integer");

                    b.Property<long?>("RxBytes")
                        .HasColumnType("bigint");

                    b.Property<int?>("RxState")
                        .HasColumnType("integer");

                    b.Property<int>("SensorId")
                        .HasColumnType("integer");

                    b.Property<double?>("SolarRad")
                        .HasColumnType("double precision");

                    b.Property<double?>("Temp")
                        .HasColumnType("double precision");

                    b.Property<double?>("TempIn")
                        .HasColumnType("double precision");

                    b.Property<double?>("ThswIndex")
                        .HasColumnType("double precision");

                    b.Property<double?>("ThwIndex")
                        .HasColumnType("double precision");

                    b.Property<int?>("TouchpadWakeups")
                        .HasColumnType("integer");

                    b.Property<int?>("TransBatteryFlag")
                        .HasColumnType("integer");

                    b.Property<long?>("Ts")
                        .HasColumnType("bigint");

                    b.Property<long?>("TxBytes")
                        .HasColumnType("bigint");

                    b.Property<int?>("TxId")
                        .HasColumnType("integer");

                    b.Property<int?>("TzOffset")
                        .HasColumnType("integer");

                    b.Property<long?>("Uptime")
                        .HasColumnType("bigint");

                    b.Property<double?>("UvIndex")
                        .HasColumnType("double precision");

                    b.Property<double?>("WetBulb")
                        .HasColumnType("double precision");

                    b.Property<int?>("WifiRssi")
                        .HasColumnType("integer");

                    b.Property<double?>("WindChill")
                        .HasColumnType("double precision");

                    b.Property<double?>("WindDirAtHiSpeedLast10Min")
                        .HasColumnType("double precision");

                    b.Property<double?>("WindDirAtHiSpeedLast2Min")
                        .HasColumnType("double precision");

                    b.Property<double?>("WindDirLast")
                        .HasColumnType("double precision");

                    b.Property<double?>("WindDirScalarAvgLast10Min")
                        .HasColumnType("double precision");

                    b.Property<double?>("WindDirScalarAvgLast1Min")
                        .HasColumnType("double precision");

                    b.Property<double?>("WindDirScalarAvgLast2Min")
                        .HasColumnType("double precision");

                    b.Property<double?>("WindSpeedAvgLast10Min")
                        .HasColumnType("double precision");

                    b.Property<double?>("WindSpeedAvgLast1Min")
                        .HasColumnType("double precision");

                    b.Property<double?>("WindSpeedAvgLast2Min")
                        .HasColumnType("double precision");

                    b.Property<double?>("WindSpeedHiLast10Min")
                        .HasColumnType("double precision");

                    b.Property<double?>("WindSpeedHiLast2Min")
                        .HasColumnType("double precision");

                    b.Property<double?>("WindSpeedLast")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("SensorId");

                    b.ToTable("WeatherData");
                });

            modelBuilder.Entity("api.Models.WeatherStations", b =>
                {
                    b.Property<long>("GeneratedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Relational:JsonPropertyName", "generated_at");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("GeneratedAt"));

                    b.HasKey("GeneratedAt");

                    b.ToTable("WeatherStations");
                });

            modelBuilder.Entity("api.Models.Node", b =>
                {
                    b.HasOne("api.Models.Station", "Station")
                        .WithMany("Nodes")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Station");
                });

            modelBuilder.Entity("api.Models.Sensor", b =>
                {
                    b.HasOne("api.Models.Station", "Station")
                        .WithMany("Sensors")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Station");
                });

            modelBuilder.Entity("api.Models.Station", b =>
                {
                    b.HasOne("api.Models.WeatherStations", "WeatherStation")
                        .WithMany("Stations")
                        .HasForeignKey("GeneratedAt")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeatherStation");
                });

            modelBuilder.Entity("api.Models.WeatherData", b =>
                {
                    b.HasOne("api.Models.Sensor", "Sensor")
                        .WithMany("WeatherData")
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("api.Models.Sensor", b =>
                {
                    b.Navigation("WeatherData");
                });

            modelBuilder.Entity("api.Models.Station", b =>
                {
                    b.Navigation("Nodes");

                    b.Navigation("Sensors");
                });

            modelBuilder.Entity("api.Models.WeatherStations", b =>
                {
                    b.Navigation("Stations");
                });
#pragma warning restore 612, 618
        }
    }
}
