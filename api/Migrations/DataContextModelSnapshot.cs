// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using api.Data;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("api.Models.Sensor", b =>
                {
                    b.Property<int>("Lsid")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "lsid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "modified_date");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "active");

                    b.Property<string>("Category")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "category");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_date");

                    b.Property<double?>("Elevation")
                        .HasColumnType("double precision")
                        .HasAnnotation("Relational:JsonPropertyName", "elevation");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision")
                        .HasAnnotation("Relational:JsonPropertyName", "latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision")
                        .HasAnnotation("Relational:JsonPropertyName", "longitude");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "manufacturer");

                    b.Property<long?>("ParentDeviceId")
                        .HasColumnType("bigint")
                        .HasAnnotation("Relational:JsonPropertyName", "parent_device_id");

                    b.Property<string>("ParentDeviceIdHex")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "parent_device_id_hex");

                    b.Property<string>("ParentDeviceName")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "parent_device_name");

                    b.Property<string>("ParentDeviceType")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "parent_device_type");

                    b.Property<int?>("PortNumber")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "port_number");

                    b.Property<string>("ProductName")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "product_name");

                    b.Property<string>("ProductNumber")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "product_number");

                    b.Property<int?>("RainCollectorType")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "rain_collector_type");

                    b.Property<int?>("SensorType")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "sensor_type");

                    b.Property<int>("StationId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "station_id");

                    b.Property<string>("StationIdUuid")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "station_id_uuid");

                    b.Property<string>("StationName")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "station_name");

                    b.Property<int?>("TxId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "tx_id");

                    b.HasKey("Lsid", "ModifiedDate");

                    b.ToTable("Sensors");
                });

            modelBuilder.Entity("api.Models.Station", b =>
                {
                    b.Property<int>("StationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "station_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StationId"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "active");

                    b.Property<string>("City")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "city");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "company_name");

                    b.Property<string>("Country")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "country");

                    b.Property<double>("Elevation")
                        .HasColumnType("double precision")
                        .HasAnnotation("Relational:JsonPropertyName", "elevation");

                    b.Property<string>("FirmwareVersion")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "firmware_version");

                    b.Property<int>("GatewayId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "gateway_id");

                    b.Property<string>("GatewayIdHex")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "gateway_id_hex");

                    b.Property<string>("GatewayType")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "gateway_type");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision")
                        .HasAnnotation("Relational:JsonPropertyName", "latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision")
                        .HasAnnotation("Relational:JsonPropertyName", "longitude");

                    b.Property<bool>("Private")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "private");

                    b.Property<string>("ProductNumber")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "product_number");

                    b.Property<int>("RecordingInterval")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "recording_interval");

                    b.Property<string>("Region")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "region");

                    b.Property<long>("RegisteredDate")
                        .HasColumnType("bigint")
                        .HasAnnotation("Relational:JsonPropertyName", "registered_date");

                    b.Property<string>("RelationshipType")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "relationship_type");

                    b.Property<Guid>("StationIdUuid")
                        .HasColumnType("uuid");

                    b.Property<string>("StationIdUuidString")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "station_id_uuid");

                    b.Property<string>("StationName")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "station_name");

                    b.Property<string>("SubscriptionType")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "subscription_type");

                    b.Property<string>("TimeZone")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "time_zone");

                    b.Property<string>("UserEmail")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "user_email");

                    b.Property<string>("Username")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "username");

                    b.HasKey("StationId");

                    b.HasIndex("StationIdUuid")
                        .IsUnique();

                    b.ToTable("Stations");
                });
#pragma warning restore 612, 618
        }
    }
}
